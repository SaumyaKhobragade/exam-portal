<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Owner Dashboard - CodeSecure</title>
    <link rel="stylesheet" href="/stylesheets/adminDashboard.css">
    <style>
        .owner-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 30px;
            text-align: center;
        }
        
        .owner-title {
            font-size: 28px;
            font-weight: bold;
            margin-bottom: 10px;
        }
        
        .owner-subtitle {
            font-size: 16px;
            opacity: 0.9;
        }
        
        .admin-management-section {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        
        .section-title {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 20px;
            color: #333;
        }
        
        .admin-form {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
        }
        
        .form-label {
            font-weight: 500;
            margin-bottom: 8px;
            color: #555;
        }
        
        .form-input {
            padding: 12px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }
        
        .form-input:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .full-width {
            grid-column: 1 / -1;
        }
        
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }
        
        .btn-danger {
            background: #dc3545;
            color: white;
        }
        
        .btn-danger:hover {
            background: #c82333;
        }
        
        .admin-list {
            margin-top: 30px;
        }
        
        .admin-item {
            display: flex;
            justify-content: between;
            align-items: center;
            padding: 15px;
            border: 1px solid #e1e5e9;
            border-radius: 8px;
            margin-bottom: 10px;
            background: #f8f9fa;
        }
        
        .admin-info {
            flex: 1;
        }
        
        .admin-name {
            font-weight: 600;
            margin-bottom: 5px;
        }
        
        .admin-email {
            color: #666;
            font-size: 14px;
        }
        
        .admin-organization {
            color: #888;
            font-size: 13px;
            font-style: italic;
            margin-top: 2px;
        }
        
        .message {
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            text-align: center;
            font-weight: 500;
        }
        
        .message.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .message.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            text-align: center;
        }
        
        .stat-number {
            font-size: 36px;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 10px;
        }
        
        .stat-label {
            font-size: 16px;
            color: #666;
            font-weight: 500;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <div class="owner-header">
            <div class="owner-title">üëë Owner Dashboard</div>
            <div class="owner-subtitle">Complete control and management of the CodeSecure platform</div>
        </div>

        <!-- Statistics Section -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number" id="totalUsers">-</div>
                <div class="stat-label">Total Users</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="adminCount">-</div>
                <div class="stat-label">Admins</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="userCount">-</div>
                <div class="stat-label">Regular Users</div>
            </div>
        </div>

        <!-- Admin Management Section -->
        <div class="admin-management-section">
            <h2 class="section-title">üë®‚Äçüíº Admin Management</h2>
            
            <form id="createAdminForm" class="admin-form">
                <div class="form-group">
                    <label class="form-label">Username</label>
                    <input type="text" class="form-input" id="adminUsername" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Full Name</label>
                    <input type="text" class="form-input" id="adminFullname" required>
                </div>
                <div class="form-group full-width">
                    <label class="form-label">Email Address</label>
                    <input type="email" class="form-input" id="adminEmail" required>
                </div>
                <div class="form-group full-width">
                    <label class="form-label">University/Organization</label>
                    <input type="text" class="form-input" id="adminOrganization" placeholder="Enter university or organization name" required>
                </div>
                <div class="form-group full-width">
                    <label class="form-label">Password</label>
                    <input type="password" class="form-input" id="adminPassword" required>
                </div>
                <div class="form-group full-width">
                    <button type="submit" class="btn btn-primary">Create Admin Account</button>
                </div>
            </form>
            
            <div id="message" class="message" style="display: none;"></div>
            
            <div class="admin-list">
                <h3>Current Admins</h3>
                <div id="adminsList">
                    <p>Loading admins...</p>
                </div>
            </div>
        </div>

        <!-- Exam Request Management Section -->
        <div class="dashboard-section">
            <h2>üìã Exam Request Management</h2>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="pendingRequests">0</div>
                    <div class="stat-label">Pending Requests</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="approvedRequests">0</div>
                    <div class="stat-label">Approved Requests</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="totalRequests">0</div>
                    <div class="stat-label">Total Requests</div>
                </div>
            </div>

            <div class="exam-requests-section">
                <div class="section-header">
                    <h3>Recent Exam Requests</h3>
                    <div class="filter-buttons">
                        <button class="btn" onclick="loadExamRequests('all')" id="filterAll">All</button>
                        <button class="btn" onclick="loadExamRequests('pending')" id="filterPending">Pending</button>
                        <button class="btn" onclick="loadExamRequests('approved')" id="filterApproved">Approved</button>
                        <button class="btn" onclick="loadExamRequests('rejected')" id="filterRejected">Rejected</button>
                    </div>
                </div>
                
                <div id="examRequestsList">
                    <p>Loading exam requests...</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Exam Request Review Modal -->
    <div id="reviewModal" class="modal" style="display: none;">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Review Exam Request</h3>
                <span class="close" onclick="closeReviewModal()">&times;</span>
            </div>
            <div class="modal-body">
                <div id="reviewRequestDetails"></div>
                
                <div class="form-group">
                    <label for="reviewStatus">Decision:</label>
                    <select id="reviewStatus" class="form-control">
                        <option value="">Select Decision</option>
                        <option value="approved">Approve</option>
                        <option value="rejected">Reject</option>
                    </select>
                </div>
                
                <div class="form-group" id="adminAssignmentGroup" style="display: none;">
                    <label for="assignedAdmin">Assign Admin:</label>
                    <select id="assignedAdmin" class="form-control">
                        <option value="">Select Admin</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="reviewNotes">Review Notes:</label>
                    <textarea id="reviewNotes" class="form-control" placeholder="Add your review comments..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeReviewModal()">Cancel</button>
                <button class="btn btn-primary" onclick="submitReview()">Submit Review</button>
            </div>
        </div>
    </div>

    <style>
        .exam-requests-section {
            margin-top: 20px;
        }
        
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .filter-buttons {
            display: flex;
            gap: 10px;
        }
        
        .filter-buttons .btn {
            padding: 8px 16px;
            font-size: 14px;
        }
        
        .request-item {
            background: white;
            border: 1px solid #e1e5e9;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 15px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .request-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 15px;
        }
        
        .request-title {
            font-size: 18px;
            font-weight: bold;
            color: #333;
            margin-bottom: 5px;
        }
        
        .request-org {
            color: #667eea;
            font-weight: 500;
        }
        
        .request-status {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
        }
        
        .status-pending {
            background: #fff3cd;
            color: #856404;
        }
        
        .status-approved {
            background: #d4edda;
            color: #155724;
        }
        
        .status-rejected {
            background: #f8d7da;
            color: #721c24;
        }
        
        .request-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 15px;
        }
        
        .detail-item {
            display: flex;
            flex-direction: column;
        }
        
        .detail-label {
            font-weight: bold;
            color: #666;
            font-size: 12px;
            text-transform: uppercase;
            margin-bottom: 3px;
        }
        
        .detail-value {
            color: #333;
        }
        
        .request-actions {
            display: flex;
            gap: 10px;
        }
        
        .modal {
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 0;
            border-radius: 10px;
            width: 80%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
        }
        
        .modal-header {
            padding: 20px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .modal-body {
            padding: 20px;
        }
        
        .modal-footer {
            padding: 20px;
            border-top: 1px solid #eee;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }
        
        .close {
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            color: #aaa;
        }
        
        .close:hover {
            color: black;
        }
        
        .btn-secondary {
            background: #6c757d;
            color: white;
        }
        
        .btn-secondary:hover {
            background: #5a6268;
        }
    </style>

    <script>
        // Load dashboard stats
        async function loadDashboardStats() {
            try {
                const response = await fetch('/api/v1/owner/dashboard-stats');
                const result = await response.json();
                
                if (result.success) {
                    document.getElementById('totalUsers').textContent = result.data.totalUsers;
                    document.getElementById('adminCount').textContent = result.data.adminCount;
                    document.getElementById('userCount').textContent = result.data.userCount;
                }
            } catch (error) {
                console.error('Error loading stats:', error);
            }
        }

        // Load admins list
        async function loadAdmins() {
            try {
                const response = await fetch('/api/v1/owner/admins');
                const result = await response.json();
                
                if (result.success) {
                    const adminsList = document.getElementById('adminsList');
                    
                    if (result.data.length === 0) {
                        adminsList.innerHTML = '<p>No admins found.</p>';
                        return;
                    }
                    
                    adminsList.innerHTML = result.data.map(admin => `
                        <div class="admin-item">
                            <div class="admin-info">
                                <div class="admin-name">${admin.fullname} (@${admin.username})</div>
                                <div class="admin-email">${admin.email}</div>
                                <div class="admin-organization">${admin.organization}</div>
                            </div>
                            <button class="btn btn-danger" onclick="deleteAdmin('${admin._id}')">Delete</button>
                        </div>
                    `).join('');
                }
            } catch (error) {
                console.error('Error loading admins:', error);
                document.getElementById('adminsList').innerHTML = '<p>Error loading admins.</p>';
            }
        }

        // Create admin
        document.getElementById('createAdminForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const username = document.getElementById('adminUsername').value;
            const fullname = document.getElementById('adminFullname').value;
            const email = document.getElementById('adminEmail').value;
            const password = document.getElementById('adminPassword').value;
            const organization = document.getElementById('adminOrganization').value;
            const messageDiv = document.getElementById('message');
            
            try {
                const response = await fetch('/api/v1/owner/create-admin', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ username, fullname, email, password, organization })
                });
                
                const result = await response.json();
                
                messageDiv.style.display = 'block';
                if (response.ok) {
                    messageDiv.className = 'message success';
                    messageDiv.textContent = 'Admin account created successfully!';
                    document.getElementById('createAdminForm').reset();
                    loadAdmins(); // Reload admins list
                    loadDashboardStats(); // Reload stats
                } else {
                    messageDiv.className = 'message error';
                    messageDiv.textContent = result.message || 'Failed to create admin account';
                }
            } catch (error) {
                messageDiv.style.display = 'block';
                messageDiv.className = 'message error';
                messageDiv.textContent = 'Network error. Please try again.';
            }
        });

        // Delete admin
        async function deleteAdmin(adminId) {
            if (!confirm('Are you sure you want to delete this admin account?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/v1/owner/delete-admin/${adminId}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                const messageDiv = document.getElementById('message');
                
                messageDiv.style.display = 'block';
                if (response.ok) {
                    messageDiv.className = 'message success';
                    messageDiv.textContent = 'Admin account deleted successfully!';
                    loadAdmins(); // Reload admins list
                    loadDashboardStats(); // Reload stats
                } else {
                    messageDiv.className = 'message error';
                    messageDiv.textContent = result.message || 'Failed to delete admin account';
                }
            } catch (error) {
                const messageDiv = document.getElementById('message');
                messageDiv.style.display = 'block';
                messageDiv.className = 'message error';
                messageDiv.textContent = 'Network error. Please try again.';
            }
        }

        // Exam Request Management Functions
        let currentRequestId = null;

        // Load exam request statistics
        async function loadExamRequestStats() {
            try {
                const response = await fetch('/api/v1/exam-requests/stats');
                const result = await response.json();
                
                if (result.success) {
                    document.getElementById('pendingRequests').textContent = result.data.stats.pending;
                    document.getElementById('approvedRequests').textContent = result.data.stats.approved;
                    document.getElementById('totalRequests').textContent = result.data.stats.total;
                }
            } catch (error) {
                console.error('Error loading exam request stats:', error);
            }
        }

        // Load exam requests with optional status filter
        async function loadExamRequests(status = 'all') {
            try {
                let url = '/api/v1/exam-requests/all';
                if (status !== 'all') {
                    url += `?status=${status}`;
                }
                
                const response = await fetch(url);
                const result = await response.json();
                
                if (result.success) {
                    const requestsList = document.getElementById('examRequestsList');
                    
                    if (result.data.requests.length === 0) {
                        requestsList.innerHTML = '<p>No exam requests found.</p>';
                        return;
                    }
                    
                    requestsList.innerHTML = result.data.requests.map(request => `
                        <div class="request-item">
                            <div class="request-header">
                                <div>
                                    <div class="request-title">${request.examTitle}</div>
                                    <div class="request-org">${request.organizationName}</div>
                                </div>
                                <span class="request-status status-${request.status}">${request.status.toUpperCase()}</span>
                            </div>
                            
                            <div class="request-details">
                                <div class="detail-item">
                                    <span class="detail-label">Contact Person</span>
                                    <span class="detail-value">${request.contactPerson}</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">Email</span>
                                    <span class="detail-value">${request.email}</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">Exam Date</span>
                                    <span class="detail-value">${new Date(request.examDate).toLocaleDateString()}</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">Expected Students</span>
                                    <span class="detail-value">${request.expectedStudents}</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">Exam Type</span>
                                    <span class="detail-value">${request.examType}</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">Duration</span>
                                    <span class="detail-value">${request.duration} minutes</span>
                                </div>
                            </div>
                            
                            <div class="request-actions">
                                ${request.status === 'pending' ? 
                                    `<button class="btn btn-primary" onclick="openReviewModal('${request._id}')">Review Request</button>` : 
                                    `<button class="btn" onclick="viewRequestDetails('${request._id}')">View Details</button>`
                                }
                            </div>
                        </div>
                    `).join('');
                }
            } catch (error) {
                console.error('Error loading exam requests:', error);
                document.getElementById('examRequestsList').innerHTML = '<p>Error loading exam requests.</p>';
            }
        }

        // Open review modal
        async function openReviewModal(requestId) {
            currentRequestId = requestId;
            
            try {
                // Get request details
                const response = await fetch(`/api/v1/exam-requests/all`);
                const result = await response.json();
                
                if (result.success) {
                    const request = result.data.requests.find(r => r._id === requestId);
                    if (request) {
                        // Populate modal with request details
                        document.getElementById('reviewRequestDetails').innerHTML = `
                            <div class="request-details">
                                <h4>${request.examTitle}</h4>
                                <p><strong>Organization:</strong> ${request.organizationName}</p>
                                <p><strong>Contact:</strong> ${request.contactPerson} (${request.email})</p>
                                <p><strong>Date:</strong> ${new Date(request.examDate).toLocaleDateString()}</p>
                                <p><strong>Duration:</strong> ${request.duration} minutes</p>
                                <p><strong>Expected Students:</strong> ${request.expectedStudents}</p>
                                <p><strong>Type:</strong> ${request.examType}</p>
                                ${request.description ? `<p><strong>Description:</strong> ${request.description}</p>` : ''}
                                ${request.requirements ? `<p><strong>Requirements:</strong> ${request.requirements}</p>` : ''}
                            </div>
                        `;
                        
                        // Load admins for assignment
                        loadAdminsForAssignment();
                        
                        document.getElementById('reviewModal').style.display = 'block';
                    }
                }
            } catch (error) {
                console.error('Error loading request details:', error);
            }
        }

        // Load admins for assignment dropdown
        async function loadAdminsForAssignment() {
            try {
                const response = await fetch('/api/v1/owner/admins');
                const result = await response.json();
                
                if (result.success) {
                    const adminSelect = document.getElementById('assignedAdmin');
                    adminSelect.innerHTML = '<option value="">Select Admin</option>' + 
                        result.data.map(admin => `
                            <option value="${admin._id}">${admin.fullname} (${admin.organization})</option>
                        `).join('');
                }
            } catch (error) {
                console.error('Error loading admins:', error);
            }
        }

        // Handle review status change
        document.getElementById('reviewStatus').addEventListener('change', function() {
            const adminGroup = document.getElementById('adminAssignmentGroup');
            if (this.value === 'approved') {
                adminGroup.style.display = 'block';
            } else {
                adminGroup.style.display = 'none';
            }
        });

        // Submit review
        async function submitReview() {
            const status = document.getElementById('reviewStatus').value;
            const reviewNotes = document.getElementById('reviewNotes').value;
            const assignedAdminId = document.getElementById('assignedAdmin').value;
            
            if (!status) {
                alert('Please select a decision');
                return;
            }
            
            if (status === 'approved' && !assignedAdminId) {
                alert('Please assign an admin for approved requests');
                return;
            }
            
            try {
                const response = await fetch(`/api/v1/exam-requests/${currentRequestId}/review`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        status,
                        reviewNotes,
                        assignedAdminId: status === 'approved' ? assignedAdminId : undefined
                    })
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    alert(`Request ${status} successfully!`);
                    closeReviewModal();
                    loadExamRequests();
                    loadExamRequestStats();
                } else {
                    alert(result.message || 'Failed to submit review');
                }
            } catch (error) {
                console.error('Error submitting review:', error);
                alert('Network error. Please try again.');
            }
        }

        // Close review modal
        function closeReviewModal() {
            document.getElementById('reviewModal').style.display = 'none';
            document.getElementById('reviewStatus').value = '';
            document.getElementById('reviewNotes').value = '';
            document.getElementById('assignedAdmin').value = '';
            document.getElementById('adminAssignmentGroup').style.display = 'none';
            currentRequestId = null;
        }

        // View request details (for non-pending requests)
        function viewRequestDetails(requestId) {
            // This would open a read-only modal with full request details
            alert('View details feature - would show full request information');
        }

        // Load data on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadDashboardStats();
            loadAdmins();
            loadExamRequestStats();
            loadExamRequests();
        });
    </script>
</body>
</html>
