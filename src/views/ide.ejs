<!DOCTYPE html>
<html lang="en">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>CodeSecure - <% if (typeof exam !== 'undefined' && exam) { %><%= exam.title %><% } else { %>Coding IDE<% } %></title>
  <link rel="stylesheet" href="/stylesheets/ide.css" />
</head>
<body oncontextmenu="return false;" onselectstart="return false;" ondragstart="return false;">
  <!-- Security Warning Banner -->
  <div id="securityBanner" style="background: #ff4757; color: white; text-align: center; padding: 8px; font-weight: bold; font-size: 14px; z-index: 10000; position: relative;">
    üîí SECURE EXAM MODE: Fullscreen enforced ‚Ä¢ Copy/Paste disabled ‚Ä¢ Developer Tools blocked
  </div>
  
  <div class="main-container">
    <header class="header-section">
      <div class="brand-logo">CodeSecure IDE</div>
      <% if (typeof exam !== 'undefined' && exam) { %>
        <div class="exam-info">
          <span class="exam-title"><%= exam.title %></span>
          <span class="exam-points"><%= exam.totalMarks || 'N/A' %> Points</span>
        </div>
      <% } %>
    </header>

    <main class="content-area">
      <div class="ide-layout">
        <!-- Question Navigation Bar -->
        <section class="question-nav">
          <div class="progress-section">
            <div class="progress-info">
              <% if (typeof exam !== 'undefined' && exam && exam.questions) { %>
                <span class="current-question">Question <span id="currentQuestionNum">1</span> of <%= exam.questions.length %></span>
                <div class="progress-bar">
                  <div class="progress-fill" id="progressFill" style="width: 0%"></div>
                </div>
              <% } else { %>
                <span class="current-question">Question 2 of 5</span>
                <div class="progress-bar">
                  <div class="progress-fill" style="width: 40%"></div>
                </div>
              <% } %>
            </div>
            <div class="question-buttons">
              <button class="question-btn" onclick="previousQuestion()" <% if (typeof exam === 'undefined' || !exam) { %>disabled<% } %>>‚Üê Previous</button>
              <button class="question-btn" onclick="nextQuestion()">Next ‚Üí</button>
            </div>
          </div>
          <div class="user-actions">
            <a href="#" class="action-btn" onclick="saveCode(); return false;">Save</a>
            <a href="#" class="action-btn run-btn" onclick="runCode(); return false;">Run Code</a>
            <a href="#" class="action-btn test-btn" onclick="runTests(); return false;">Run Tests</a>
            <a href="#" class="action-btn ai-btn" id="aiGradeBtn" onclick="getAIFeedback(); return false;" disabled>Get AI Feedback</a>
            <a href="#" class="action-btn submit-btn" onclick="submitCode(); return false;">Submit</a>
          </div>
          <div class="exam-timer">
            <span class="timer-label">Time Remaining:</span>
            <span class="timer" id="examTimer">
              <% if (typeof timeRemaining !== 'undefined' && timeRemaining) { %>
                <%= Math.floor(timeRemaining / 60) %>:<%= String(timeRemaining % 60).padStart(2, '0') %>
              <% } else { %>
                45:32
              <% } %>
            </span>
          </div>
        </section>

        <!-- Main IDE Content -->
        <div class="ide-content">
          <!-- Problem Section -->
          <section class="problem-section" id="problemSection">
            <div class="problem-header">
              <% if (typeof exam !== 'undefined' && exam && exam.questions && exam.questions.length > 0) { %>
                <h2 class="problem-title" id="problemTitle"><%= exam.questions[0].title || 'Coding Question' %></h2>
                <div class="problem-meta">
                  <span class="difficulty-badge medium">Medium</span>
                  <span class="problem-points" id="problemPoints"><%= exam.questions[0].points || 25 %> Points</span>
                </div>
              <% } else { %>
                <h2 class="problem-title">Two Sum Problem</h2>
                <div class="problem-meta">
                  <span class="difficulty-badge medium">Medium</span>
                  <span class="problem-points">25 Points</span>
                </div>
              <% } %>
            </div>
            
            <div class="problem-content" id="problemContent">
              <% if (typeof exam !== 'undefined' && exam && exam.questions && exam.questions.length > 0) { %>
                <div class="problem-description">
                  <h3 class="section-subtitle">Problem Description</h3>
                  <div id="problemDescription">
                    <% if ((exam.questions[0].description && exam.questions[0].description.trim()) || (exam.questions[0].statement && exam.questions[0].statement.trim())) { %>
                      <%- exam.questions[0].description || exam.questions[0].statement %>
                    <% } else { %>
                      <p>Given an array of integers, solve the <strong><%= exam.questions[0].title || 'coding problem' %></strong>.</p>
                      <p>Write an efficient solution that meets the given constraints.</p>
                      <p><em>Note: Complete problem description is not available. Please refer to examples and constraints for requirements.</em></p>
                    <% } %>
                  </div>
                </div>

                <% if (exam.questions[0].inputFormat) { %>
                  <div class="problem-input-format" id="problemInputFormat">
                    <h3 class="section-subtitle">Input Format</h3>
                    <div><%- exam.questions[0].inputFormat %></div>
                  </div>
                <% } else { %>
                  <div class="problem-input-format" id="problemInputFormat">
                    <h3 class="section-subtitle">Input Format</h3>
                    <div>
                      <ul>
                        <li>Standard input format for the problem</li>
                        <li>Check problem description for specific input structure</li>
                      </ul>
                    </div>
                  </div>
                <% } %>

                <% if (exam.questions[0].outputFormat) { %>
                  <div class="problem-output-format" id="problemOutputFormat">
                    <h3 class="section-subtitle">Output Format</h3>
                    <div><%- exam.questions[0].outputFormat %></div>
                  </div>
                <% } else { %>
                  <div class="problem-output-format" id="problemOutputFormat">
                    <h3 class="section-subtitle">Output Format</h3>
                    <div>
                      <ul>
                        <li>Output the result as required by the problem</li>
                        <li>Follow the format specified in the problem description</li>
                      </ul>
                    </div>
                  </div>
                <% } %>

                <!-- Constraints will be loaded dynamically by JavaScript -->
                <div class="problem-constraints" id="problemConstraints">
                  <h3 class="section-subtitle">Constraints</h3>
                  <ul>
                    <li>Loading constraints...</li>
                  </ul>
                </div>
              <% } else { %>
                <!-- Default problem content for demo -->
                <div class="problem-description">
                  <h3 class="section-subtitle">Problem Description</h3>
                  <p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to target.</p>
                  <p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
                  <p>You can return the answer in any order.</p>
                </div>

                <div class="problem-input-format">
                  <h3 class="section-subtitle">Input Format</h3>
                  <ul>
                    <li>The first parameter is an array of integers <code>nums</code></li>
                    <li>The second parameter is an integer <code>target</code></li>
                  </ul>
                </div>

                <div class="problem-output-format">
                  <h3 class="section-subtitle">Output Format</h3>
                  <ul>
                    <li>Return an array of two integers representing the indices</li>
                    <li>The indices should be in ascending order</li>
                  </ul>
                </div>

                <div class="problem-constraints">
                  <h3 class="section-subtitle">Constraints</h3>
                  <ul>
                    <li>2 ‚â§ nums.length ‚â§ 10<sup>4</sup></li>
                    <li>-10<sup>9</sup> ‚â§ nums[i] ‚â§ 10<sup>9</sup></li>
                    <li>-10<sup>9</sup> ‚â§ target ‚â§ 10<sup>9</sup></li>
                    <li>Only one valid answer exists.</li>
                  </ul>
                </div>
              <% } %>
            </div>
          </section>

          <!-- Resizable Slider -->
          <div class="resizer" id="resizer"></div>

          <!-- Code Section -->
          <section class="code-section" id="codeSection">
            <div class="code-header">
              <div class="language-selector">
                <select class="language-select">
                  <option value="javascript" selected>JavaScript</option>
                  <option value="python">Python</option>
                  <option value="java">Java</option>
                  <option value="cpp">C++</option>
                  <option value="csharp">C#</option>
                </select>
              </div>
              <div class="code-actions">
                <a href="#" class="code-btn reset-btn" onclick="resetCode(); return false;">Reset</a>
                <a href="#" class="code-btn format-btn" onclick="formatCode(); return false;">Format</a>
              </div>
            </div>

            <div class="code-editor-container">
              <div class="line-numbers">
                <div class="line-number">1</div>
                <div class="line-number">2</div>
                <div class="line-number">3</div>
                <div class="line-number">4</div>
                <div class="line-number">5</div>
                <div class="line-number">6</div>
                <div class="line-number">7</div>
                <div class="line-number">8</div>
                <div class="line-number">9</div>
                <div class="line-number">10</div>
                <div class="line-number">11</div>
                <div class="line-number">12</div>
                <div class="line-number">13</div>
                <div class="line-number">14</div>
                <div class="line-number">15</div>
              </div>
              <textarea class="code-editor" placeholder="Write your solution here...">// Array Sum Problem
// Input: n (array length), followed by n elements
// Output: Sum of all elements

function solve(input) {
    const lines = input.trim().split('\n');
    const n = parseInt(lines[0]);
    const arr = lines[1].split(',').map(Number);
    
    let sum = 0;
    for (let i = 0; i < n; i++) {
        sum += arr[i];
    }
    
    return sum;
}

// Test with sample input
const testInput = "5\n1,2,3,4,5";
console.log(solve(testInput)); // Expected: 15</textarea>
            </div>

            <!-- Input Section -->
            <div class="input-section">
              <div class="input-header">
                <h3 class="input-title">Input (stdin)</h3>
                <span class="input-info">Provide input for your program here</span>
              </div>
              <textarea class="input-editor" placeholder="Enter input here:&#10;5&#10;1,2,3,4,5">5
1,2,3,4,5</textarea>
            </div>
          </section>
        </div>

        <!-- Tabbed Console and Test Results Section -->
        <section class="tabbed-section">
          <div class="tab-bar">
            <button class="tab-btn active" onclick="switchTab('console')">
              <span class="tab-icon">üñ•Ô∏è</span>
              Console
            </button>
            <button class="tab-btn" onclick="switchTab('tests')">
              <span class="tab-icon">üß™</span>
              Test Results
            </button>
            <button class="tab-btn" onclick="switchTab('feedback')">
              <span class="tab-icon">ü§ñ</span>
              AI Feedback
            </button>
            <button class="collapse-btn" onclick="toggleCollapse()">
              <span class="collapse-icon">‚ñº</span>
            </button>
          </div>

          <!-- Console Tab Content -->
          <div class="tab-content active" id="consoleTab">
            <div class="tab-header">
              <h3 class="tab-title">Console Output</h3>
              <a href="#" class="clear-btn" onclick="clearConsole(); return false;">Clear</a>
            </div>
            <div class="console-output">
              <div class="console-line">Welcome to CodeSecure IDE</div>
              <div class="console-line">Ready to run your code...</div>
              <div class="console-cursor">></div>
            </div>
          </div>

          <!-- Test Results Tab Content -->
          <div class="tab-content" id="testsTab">
            <div class="tab-header">
              <h3 class="tab-title">Test Results</h3>
              <a href="#" class="run-tests-btn" onclick="runTests(); return false;">Run Tests</a>
            </div>
            <div class="test-cases" id="testCasesContainer">
              <!-- Test cases will be loaded dynamically by JavaScript -->
            </div>
          </div>

          <!-- AI Feedback Tab Content -->
          <div class="tab-content" id="feedbackTab">
            <div class="tab-header">
              <h3 class="tab-title">AI Code Feedback</h3>
              <button class="ai-btn" id="aiGradeBtn" onclick="getAIFeedback()" disabled>
                Get AI Feedback
              </button>
            </div>
            <div class="ai-feedback-container" id="aiFeedbackContainer">
              <div class="feedback-placeholder">
                <div class="placeholder-icon">ü§ñ</div>
                <h4>AI Code Analysis</h4>
                <p>Run your test cases first, then click "Get AI Feedback" to receive intelligent feedback on your code quality, efficiency, and suggestions for improvement.</p>
                <div class="feedback-features">
                  <div class="feature-item">‚úÖ Code Correctness Analysis</div>
                  <div class="feature-item">üé® Code Quality Assessment</div>
                  <div class="feature-item">‚ö° Performance Optimization Tips</div>
                  <div class="feature-item">üìñ Best Practices Review</div>
                </div>
              </div>
            </div>
          </div>
        </section>
      </div>
    </main>
  </div>

  <!-- Pass exam data to JavaScript -->
  <script type="application/json" id="exam-data">
    <% if (typeof exam !== 'undefined' && exam) { %>
    <%- JSON.stringify({
      exam: {
        id: exam._id,
        title: exam.title,
        description: exam.description || "",
        duration: exam.duration,
        totalMarks: exam.totalMarks || 0,
        questions: exam.questions || []
      },
      currentQuestionIndex: 0,
      isExamMode: true,
      initialTimeRemaining: typeof timeRemaining !== 'undefined' ? timeRemaining : (exam.duration ? exam.duration * 60 : 2732)
    }) %>
    <% } else { %>
    {
      "exam": null,
      "currentQuestionIndex": 0,
      "isExamMode": false,
      "initialTimeRemaining": 2732
    }
    <% } %>
  </script>
  
  <script src="/javascripts/ide.js"></script>

</body>
</html>
