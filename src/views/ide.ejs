<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>CodeSecure - <% if (typeof exam !== 'undefined' && exam) { %><%= exam.title %><% } else { %>Coding IDE<% } %></title>
  <link rel="stylesheet" href="/stylesheets/ide.css" />
</head>
<body>
  <div class="main-container">
    <header class="header-section">
      <div class="brand-logo">CodeSecure IDE</div>
      <% if (typeof exam !== 'undefined' && exam) { %>
        <div class="exam-info">
          <span class="exam-title"><%= exam.title %></span>
          <span class="exam-points"><%= exam.totalMarks || 'N/A' %> Points</span>
        </div>
      <% } %>
    </header>

    <main class="content-area">
      <div class="ide-layout">
        <!-- Question Navigation Bar -->
        <section class="question-nav">
          <div class="progress-section">
            <div class="progress-info">
              <% if (typeof exam !== 'undefined' && exam && exam.questions) { %>
                <span class="current-question">Question <span id="currentQuestionNum">1</span> of <%= exam.questions.length %></span>
                <div class="progress-bar">
                  <div class="progress-fill" style="width: <%= Math.round((1 / exam.questions.length) * 100) %>%"></div>
                </div>
              <% } else { %>
                <span class="current-question">Question 2 of 5</span>
                <div class="progress-bar">
                  <div class="progress-fill" style="width: 40%"></div>
                </div>
              <% } %>
            </div>
            <div class="question-buttons">
              <button class="question-btn" onclick="previousQuestion()" <% if (typeof exam === 'undefined' || !exam) { %>disabled<% } %>>← Previous</button>
              <button class="question-btn" onclick="nextQuestion()">Next →</button>
            </div>
          </div>
          <div class="user-actions">
            <a href="#" class="action-btn" onclick="saveCode(); return false;">Save</a>
            <a href="#" class="action-btn run-btn" onclick="runCode(); return false;">Run Code</a>
            <a href="#" class="action-btn test-btn" onclick="runTests(); return false;">Run Tests</a>
            <a href="#" class="action-btn submit-btn" onclick="submitCode(); return false;">Submit</a>
          </div>
          <div class="exam-timer">
            <span class="timer-label">Time Remaining:</span>
            <span class="timer" id="examTimer">
              <% if (typeof timeRemaining !== 'undefined' && timeRemaining) { %>
                <%= Math.floor(timeRemaining / 60) %>:<%= String(timeRemaining % 60).padStart(2, '0') %>
              <% } else { %>
                45:32
              <% } %>
            </span>
          </div>
        </section>

        <!-- Main IDE Content -->
        <div class="ide-content">
          <!-- Problem Section -->
          <section class="problem-section" id="problemSection">
            <div class="problem-header">
              <% if (typeof exam !== 'undefined' && exam && exam.questions && exam.questions.length > 0) { %>
                <h2 class="problem-title" id="problemTitle"><%= exam.questions[0].title || 'Coding Question' %></h2>
                <div class="problem-meta">
                  <span class="difficulty-badge medium">Medium</span>
                  <span class="problem-points" id="problemPoints"><%= exam.questions[0].points || 25 %> Points</span>
                </div>
              <% } else { %>
                <h2 class="problem-title">Two Sum Problem</h2>
                <div class="problem-meta">
                  <span class="difficulty-badge medium">Medium</span>
                  <span class="problem-points">25 Points</span>
                </div>
              <% } %>
            </div>
            
            <div class="problem-content" id="problemContent">
              <% if (typeof exam !== 'undefined' && exam && exam.questions && exam.questions.length > 0) { %>
                <div class="problem-description">
                  <h3 class="section-subtitle">Problem Description</h3>
                  <div id="problemDescription"><%- exam.questions[0].description || 'No description available.' %></div>
                </div>

                <% if (exam.questions[0].inputFormat) { %>
                  <div class="problem-input-format" id="problemInputFormat">
                    <h3 class="section-subtitle">Input Format</h3>
                    <div><%- exam.questions[0].inputFormat %></div>
                  </div>
                <% } %>

                <% if (exam.questions[0].outputFormat) { %>
                  <div class="problem-output-format" id="problemOutputFormat">
                    <h3 class="section-subtitle">Output Format</h3>
                    <div><%- exam.questions[0].outputFormat %></div>
                  </div>
                <% } %>

                <% if (exam.questions[0].examples && exam.questions[0].examples.length > 0) { %>
                  <div class="problem-examples" id="problemExamples">
                    <h3 class="section-subtitle">Examples</h3>
                    <% exam.questions[0].examples.forEach((example, index) => { %>
                      <div class="example-item">
                        <h4 class="example-title">Example <%= index + 1 %>:</h4>
                        <div class="code-block">
                          <strong>Input:</strong> <%= example.input %><br>
                          <strong>Output:</strong> <%= example.output %><br>
                          <% if (example.explanation) { %>
                            <strong>Explanation:</strong> <%= example.explanation %>
                          <% } %>
                        </div>
                      </div>
                    <% }); %>
                  </div>
                <% } %>

                <% if (exam.questions[0].constraints) { %>
                  <div class="problem-constraints" id="problemConstraints">
                    <h3 class="section-subtitle">Constraints</h3>
                    <ul>
                      <% if (Array.isArray(exam.questions[0].constraints)) { %>
                        <% exam.questions[0].constraints.forEach(constraint => { %>
                          <li><%- constraint %></li>
                        <% }); %>
                      <% } else { %>
                        <li><%- exam.questions[0].constraints %></li>
                      <% } %>
                    </ul>
                  </div>
                <% } %>
              <% } else { %>
                <!-- Default problem content for demo -->
                <div class="problem-description">
                  <h3 class="section-subtitle">Problem Description</h3>
                  <p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to target.</p>
                  <p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
                  <p>You can return the answer in any order.</p>
                </div>

                <div class="problem-input-format">
                  <h3 class="section-subtitle">Input Format</h3>
                  <ul>
                    <li>The first parameter is an array of integers <code>nums</code></li>
                    <li>The second parameter is an integer <code>target</code></li>
                  </ul>
                </div>

                <div class="problem-output-format">
                  <h3 class="section-subtitle">Output Format</h3>
                  <ul>
                    <li>Return an array of two integers representing the indices</li>
                    <li>The indices should be in ascending order</li>
                  </ul>
                </div>

                <div class="problem-examples">
                  <h3 class="section-subtitle">Examples</h3>
                  <div class="example-item">
                    <h4 class="example-title">Example 1:</h4>
                    <div class="code-block">
                      <strong>Input:</strong> nums = [2,7,11,15], target = 9<br>
                      <strong>Output:</strong> [0,1]<br>
                      <strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].
                    </div>
                  </div>
                  <div class="example-item">
                    <h4 class="example-title">Example 2:</h4>
                    <div class="code-block">
                      <strong>Input:</strong> nums = [3,2,4], target = 6<br>
                      <strong>Output:</strong> [1,2]
                    </div>
                  </div>
                </div>

                <div class="problem-constraints">
                  <h3 class="section-subtitle">Constraints</h3>
                  <ul>
                    <li>2 ≤ nums.length ≤ 10<sup>4</sup></li>
                    <li>-10<sup>9</sup> ≤ nums[i] ≤ 10<sup>9</sup></li>
                    <li>-10<sup>9</sup> ≤ target ≤ 10<sup>9</sup></li>
                    <li>Only one valid answer exists.</li>
                  </ul>
                </div>
              <% } %>
            </div>
          </section>

          <!-- Resizable Slider -->
          <div class="resizer" id="resizer"></div>

          <!-- Code Section -->
          <section class="code-section" id="codeSection">
            <div class="code-header">
              <div class="language-selector">
                <select class="language-select">
                  <option value="javascript" selected>JavaScript</option>
                  <option value="python">Python</option>
                  <option value="java">Java</option>
                  <option value="cpp">C++</option>
                  <option value="csharp">C#</option>
                </select>
              </div>
              <div class="code-actions">
                <a href="#" class="code-btn reset-btn" onclick="resetCode(); return false;">Reset</a>
                <a href="#" class="code-btn format-btn" onclick="formatCode(); return false;">Format</a>
              </div>
            </div>

            <div class="code-editor-container">
              <div class="line-numbers">
                <div class="line-number">1</div>
                <div class="line-number">2</div>
                <div class="line-number">3</div>
                <div class="line-number">4</div>
                <div class="line-number">5</div>
                <div class="line-number">6</div>
                <div class="line-number">7</div>
                <div class="line-number">8</div>
                <div class="line-number">9</div>
                <div class="line-number">10</div>
                <div class="line-number">11</div>
                <div class="line-number">12</div>
                <div class="line-number">13</div>
                <div class="line-number">14</div>
                <div class="line-number">15</div>
              </div>
              <textarea class="code-editor" placeholder="Write your solution here...">/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {
    // Your solution here
    
};

// Test cases
console.log(twoSum([2,7,11,15], 9)); // Expected: [0,1]
console.log(twoSum([3,2,4], 6));     // Expected: [1,2]</textarea>
            </div>

            <!-- Input Section -->
            <div class="input-section">
              <div class="input-header">
                <h3 class="input-title">Input (stdin)</h3>
                <span class="input-info">Provide input for your program here</span>
              </div>
              <textarea class="input-editor" placeholder="Enter input here (for JavaScript, input is typically handled differently):&#10;&#10;For testing array problems, modify the test cases in the code editor directly.">// For JavaScript, input is typically handled through function parameters
// Modify the test cases in the code editor above</textarea>
            </div>
          </section>
        </div>

        <!-- Tabbed Console and Test Results Section -->
        <section class="tabbed-section">
          <div class="tab-bar">
            <button class="tab-btn active" onclick="switchTab('console')">
              <span class="tab-icon">🖥️</span>
              Console
            </button>
            <button class="tab-btn" onclick="switchTab('tests')">
              <span class="tab-icon">🧪</span>
              Test Results
            </button>
            <button class="collapse-btn" onclick="toggleCollapse()">
              <span class="collapse-icon">▼</span>
            </button>
          </div>

          <!-- Console Tab Content -->
          <div class="tab-content active" id="consoleTab">
            <div class="tab-header">
              <h3 class="tab-title">Console Output</h3>
              <a href="#" class="clear-btn" onclick="clearConsole(); return false;">Clear</a>
            </div>
            <div class="console-output">
              <div class="console-line">Welcome to CodeSecure IDE</div>
              <div class="console-line">Ready to run your code...</div>
              <div class="console-cursor">></div>
            </div>
          </div>

          <!-- Test Results Tab Content -->
          <div class="tab-content" id="testsTab">
            <div class="tab-header">
              <h3 class="tab-title">Test Results</h3>
              <a href="#" class="run-tests-btn" onclick="runTests(); return false;">Run Tests</a>
            </div>
            <div class="test-cases" id="testCasesContainer">
              <% if (typeof exam !== 'undefined' && exam && exam.questions && exam.questions[0] && exam.questions[0].testCases) { %>
                <% exam.questions[0].testCases.forEach((testCase, index) => { %>
                  <div class="test-case" data-test-index="<%= index %>">
                    <div class="test-header">
                      <span class="test-name">Test Case <%= index + 1 %></span>
                      <span class="test-status pending">Pending</span>
                    </div>
                    <div class="test-details">
                      <p><strong>Input:</strong> <%= testCase.input %></p>
                      <p><strong>Expected:</strong> <%= testCase.expectedOutput %></p>
                      <p><strong>Output:</strong> -</p>
                    </div>
                  </div>
                <% }); %>
              <% } else { %>
                <!-- Default test cases -->
                <div class="test-case" data-test-index="0">
                  <div class="test-header">
                    <span class="test-name">Test Case 1</span>
                    <span class="test-status pending">Pending</span>
                  </div>
                  <div class="test-details">
                    <p><strong>Input:</strong> nums = [2,7,11,15], target = 9</p>
                    <p><strong>Expected:</strong> [0,1]</p>
                    <p><strong>Output:</strong> -</p>
                  </div>
                </div>
                <div class="test-case" data-test-index="1">
                  <div class="test-header">
                    <span class="test-name">Test Case 2</span>
                    <span class="test-status pending">Pending</span>
                  </div>
                  <div class="test-details">
                    <p><strong>Input:</strong> nums = [3,2,4], target = 6</p>
                    <p><strong>Expected:</strong> [1,2]</p>
                    <p><strong>Output:</strong> -</p>
                  </div>
                </div>
              <% } %>
            </div>
          </div>
        </section>
      </div>
    </main>
  </div>

  <!-- Pass exam data to JavaScript -->
  <script>
    // Global exam data for JavaScript
    <% if (typeof exam !== 'undefined' && exam) { %>
    window.examData = {
      exam: {
        id: '<%= exam._id %>',
        title: '<%= exam.title %>',
        description: '<%= exam.description || "" %>',
        duration: <%= exam.duration %>,
        totalMarks: <%= exam.totalMarks || 0 %>,
        questions: <%- JSON.stringify(exam.questions || []) %>,
        timeRemaining: <%= typeof timeRemaining !== 'undefined' ? timeRemaining : 0 %>
      },
      currentQuestionIndex: 0,
      isExamMode: true
    };
    let timeRemaining = <%= typeof timeRemaining !== 'undefined' ? timeRemaining : 2732 %>;
    <% } else { %>
    window.examData = {
      exam: null,
      currentQuestionIndex: 0,
      isExamMode: false
    };
    let timeRemaining = 45 * 60 + 32; // Default fallback time
    <% } %>
  </script>
  
  <script src="/javascripts/ide.js"></script>

</body>
</html>
